usCounties%>%
leaflet()%>%
addPolygons(fillColor =~countyColors(Cases2018),
fillOpacity =~.8,
color = "black",
opacity = 1,
weight = .25)%>%
setView(-90, 37.8, 4)%>%
addLegend(pal = countyColors,
values = usCounties@data$Cases2018,
title = "Lyme Disease Cases")%>%
addCircleMarkers(lat =~wrangledPathogen$field_latitude,
lng =~wrangledPathogen$field_longitude,
label =~wrangledPathogen$siteID,
radius =~wrangledPathogen$`Borrelia burgdorferi sensu lato`*wrangledPathogen$numTests*(1/8),
color = "orange",
fillOpacity = .75,
stroke = FALSE)
usCounties%>%
leaflet()%>%
addPolygons(fillColor =~countyColors(Cases2018),
fillOpacity =~.8,
color = "black",
opacity = 1,
weight = .25)%>%
setView(-90, 37.8, 4)%>%
addLegend(pal = countyColors,
values = usCounties@data$Cases2018,
title = "Lyme Disease Cases")%>%
addCircleMarkers(lat =~wrangledPathogen$field_latitude,
lng =~wrangledPathogen$field_longitude,
label =~wrangledPathogen$siteID,
radius =~wrangledPathogen$`Borrelia burgdorferi sensu lato`*wrangledPathogen$numTests*(1/12),
color = "orange",
fillOpacity = .75,
stroke = FALSE)
usCounties%>%
leaflet()%>%
addPolygons(fillColor =~countyColors(Cases2018),
fillOpacity =~.8,
color = "black",
opacity = 1,
weight = .25)%>%
setView(-90, 37.8, 4)%>%
addLegend(pal = countyColors,
values = usCounties@data$Cases2018,
title = "Lyme Disease Cases")%>%
addCircleMarkers(lat =~wrangledPathogen$field_latitude,
lng =~wrangledPathogen$field_longitude,
label =~wrangledPathogen$siteID,
radius =~wrangledPathogen$`Borrelia burgdorferi sensu lato`*(log10(wrangledPathogen$numTests))
color = "orange",
fillOpacity = .75,
stroke = FALSE)
usCounties%>%
leaflet()%>%
addPolygons(fillColor =~countyColors(Cases2018),
fillOpacity =~.8,
color = "black",
opacity = 1,
weight = .25)%>%
setView(-90, 37.8, 4)%>%
addLegend(pal = countyColors,
values = usCounties@data$Cases2018,
title = "Lyme Disease Cases")%>%
addCircleMarkers(lat =~wrangledPathogen$field_latitude,
lng =~wrangledPathogen$field_longitude,
label =~wrangledPathogen$siteID,
radius =~wrangledPathogen$`Borrelia burgdorferi sensu lato`*(log(wrangledPathogen$numTests))
color = "orange",
fillOpacity = .75,
stroke = FALSE)
usCounties%>%
leaflet()%>%
addPolygons(fillColor =~countyColors(Cases2018),
fillOpacity =~.8,
color = "black",
opacity = 1,
weight = .25)%>%
setView(-90, 37.8, 4)%>%
addLegend(pal = countyColors,
values = usCounties@data$Cases2018,
title = "Lyme Disease Cases")%>%
addCircleMarkers(lat =~wrangledPathogen$field_latitude,
lng =~wrangledPathogen$field_longitude,
label =~wrangledPathogen$siteID,
radius =~wrangledPathogen$`Borrelia burgdorferi sensu lato`*log(wrangledPathogen$numTests)
color = "orange",
fillOpacity = .75,
stroke = FALSE)
usCounties%>%
leaflet()%>%
addPolygons(fillColor =~countyColors(Cases2018),
fillOpacity =~.8,
color = "black",
opacity = 1,
weight = .25)%>%
setView(-90, 37.8, 4)%>%
addLegend(pal = countyColors,
values = usCounties@data$Cases2018,
title = "Lyme Disease Cases")%>%
addCircleMarkers(lat =~wrangledPathogen$field_latitude,
lng =~wrangledPathogen$field_longitude,
label =~wrangledPathogen$siteID,
radius =~wrangledPathogen$`Borrelia burgdorferi sensu lato`*log(wrangledPathogen$numTests),
color = "orange",
fillOpacity = .75,
stroke = FALSE)
usCounties%>%
leaflet()%>%
addPolygons(fillColor =~countyColors(Cases2018),
fillOpacity =~.8,
color = "black",
opacity = 1,
weight = .25)%>%
setView(-90, 37.8, 4)%>%
addLegend(pal = countyColors,
values = usCounties@data$Cases2018,
title = "Lyme Disease Cases")%>%
addCircleMarkers(lat =~wrangledPathogen$field_latitude,
lng =~wrangledPathogen$field_longitude,
label =~wrangledPathogen$siteID,
radius =~wrangledPathogen$`Borrelia burgdorferi sensu lato`*log(wrangledPathogen$numTests)+100,
color = "orange",
fillOpacity = .75,
stroke = FALSE)
usCounties%>%
leaflet()%>%
addPolygons(fillColor =~countyColors(Cases2018),
fillOpacity =~.8,
color = "black",
opacity = 1,
weight = .25)%>%
setView(-90, 37.8, 4)%>%
addLegend(pal = countyColors,
values = usCounties@data$Cases2018,
title = "Lyme Disease Cases")%>%
addCircleMarkers(lat =~wrangledPathogen$field_latitude,
lng =~wrangledPathogen$field_longitude,
label =~wrangledPathogen$siteID,
radius =~wrangledPathogen$`Borrelia burgdorferi sensu lato`*log(wrangledPathogen$numTests)*75,
color = "orange",
fillOpacity = .75,
stroke = FALSE)
usCounties%>%
leaflet()%>%
addPolygons(fillColor =~countyColors(Cases2018),
fillOpacity =~.8,
color = "black",
opacity = 1,
weight = .25)%>%
setView(-90, 37.8, 4)%>%
addLegend(pal = countyColors,
values = usCounties@data$Cases2018,
title = "Lyme Disease Cases")%>%
addCircleMarkers(lat =~wrangledPathogen$field_latitude,
lng =~wrangledPathogen$field_longitude,
label =~wrangledPathogen$siteID,
radius =~wrangledPathogen$`Borrelia burgdorferi sensu lato`*log(wrangledPathogen$numTests)*20,
color = "orange",
fillOpacity = .75,
stroke = FALSE)
usCounties%>%
leaflet()%>%
addPolygons(fillColor =~countyColors(Cases2018),
fillOpacity =~.8,
color = "black",
opacity = 1,
weight = .25)%>%
setView(-90, 37.8, 4)%>%
addLegend(pal = countyColors,
values = usCounties@data$Cases2018,
title = "Lyme Disease Cases")%>%
addCircleMarkers(lat =~wrangledPathogen$field_latitude,
lng =~wrangledPathogen$field_longitude,
label =~wrangledPathogen$siteID,
radius =~wrangledPathogen$`Borrelia burgdorferi sensu lato`*wrangledPathogen$numTests*(1/20),
color = "orange",
fillOpacity = .75,
stroke = FALSE)
usCounties%>%
leaflet()%>%
addPolygons(fillColor =~countyColors(Cases2018),
fillOpacity =~.8,
color = "black",
opacity = 1,
weight = .25)%>%
setView(-90, 37.8, 4)%>%
addLegend(pal = countyColors,
values = usCounties@data$Cases2018,
title = "Lyme Disease Cases")%>%
addCircleMarkers(lat =~wrangledPathogen$field_latitude,
lng =~wrangledPathogen$field_longitude,
label =~wrangledPathogen$siteID,
radius =~wrangledPathogen$`Borrelia burgdorferi sensu lato`*wrangledPathogen$numTests*(1/30),
color = "orange",
fillOpacity = .75,
stroke = FALSE)
usCounties%>%
leaflet()%>%
addPolygons(fillColor =~countyColors(Cases2018),
fillOpacity =~.8,
color = "black",
opacity = 1,
weight = .25)%>%
setView(-90, 37.8, 4)%>%
addLegend(pal = countyColors,
values = usCounties@data$Cases2018,
title = "Lyme Disease Cases")%>%
addCircleMarkers(lat =~wrangledPathogen$field_latitude,
lng =~wrangledPathogen$field_longitude,
label =~wrangledPathogen$siteID,
radius =~wrangledPathogen$`Borrelia burgdorferi sensu lato`*wrangledPathogen$numTests*(1/30)+4,
color = "orange",
fillOpacity = .75,
stroke = FALSE)
shiny::runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW3/tickPathogen')
runApp('Desktop/DS/PM/HW3/tickPathogen')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
?selectInput()
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
colnames(domainPathogen)
domainPathogen<-read_csv("domainPathogen.csv")
View(tickPathogen)
domainPathogen<-tickPathogen%>%
filter(sampleCondition == "OK",
testPathogenName != "HardTick DNA Quality")%>%
filter(!is.na(testResult))%>%
select(domainID, testResult, testPathogenName)%>%
mutate(domainID = as.numeric(str_sub(domainID,2,3)),
testResult = testResult == "Positive")%>%
group_by(domainID, testPathogenName)%>%
summarize(meanRate = mean(testResult, na.rm=TRUE))%>%
pivot_wider(id_cols = domainID, names_from = testPathogenName, values_from = meanRate, values_fill = 0)
View(domainPathogen)
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
CDCdata<- read_csv('LDcountyData.csv')
CDCdata<- read_csv('/Users/Kevin/Desktop/DS/PM/HW4/LDcountyData.csv')
View(CDCdata)
?sliderInput
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
paste("Cases",2000)
?paste
paste("Cases",2000, collapse = TRUE)
paste("Cases",2000, collapse = "")
paste("Cases",2000, sep = "")
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
?sliderInput
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
View(domainPathogen)
colnames(domainPathogen)
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
?flowLayout
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
?geom_bar
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
geom_text
?geom_text
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp()
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
?.naLabel
?.na_Label
?na.Label
?na.label
runApp('Desktop/DS/PM/HW4/Assignment4')
?colorBin
?scale_fill_binned
runApp('Desktop/DS/PM/HW4/Assignment4')
?addLegend
runApp('Desktop/DS/PM/HW4/Assignment4')
?colorBin
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
View(domainPathogen)
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
?addLegend
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp()
runApp('Desktop/DS/PM/HW4/Assignment4')
colnames(usDomains@data)
colnames(usDomains@data)
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
View(siteData)
View(numSampled)
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
view(sitePathogen)
View(siteData)
View(wrangledPathogen)
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp()
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
popData <- read_csv("/Users/Kevin/Desktop/DS/PM/HW4/co-est2011-alldata (1).csv")%>%
select(county, CENSUS2010POP)
popData <- read_csv("/Users/Kevin/Desktop/DS/PM/HW4/co-est2011-alldata (1).csv")%>%
select(county, CENSUS2010POP)
View(popData)
View(popData)
colnames(popData)
usCounties@data<-usCounties@data%>%
mutate(Cases2000 = Cases2000/CENSUS2010POP,
Cases2000 = Cases2000/CENSUS2010POP,
Cases2000 = Cases2000/CENSUS2010POP,
)
runApp('Desktop/DS/PM/HW4/Assignment4')
View(popData)
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
View(popData)
runApp()
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
lymeData <- read_csv("/Users/Kevin/Desktop/DS/PM/HW4/LDcountyData.csv")
popData <- read_csv("/Users/Kevin/Desktop/DS/PM/HW4/2011alldata.csv")%>%
select(county, CENSUS2010POP)
lymeData <- read_csv("/Users/Kevin/Desktop/DS/PM/HW4/LDcountyData.csv")
View(lymeData)
View(popData)
#Second export (CDC lyme data)
lymeData%>%
select(-Ctyname,-Stname,-STCODE)%>%
left_join(popData,
by = c("CTYCODE","county"))%>%view()
popData <- read_csv("/Users/Kevin/Desktop/DS/PM/HW4/2011alldata.csv")%>%
select(county, CENSUS2010POP)%>%
mutate(county = as.numeric(county))
#Second export (CDC lyme data)
lymeData%>%
select(-Ctyname,-Stname,-STCODE)%>%
left_join(popData,
by = c("CTYCODE","county"))%>%view()
popData <- read_csv("/Users/Kevin/Desktop/DS/PM/HW4/2011alldata.csv")%>%
select(county, CENSUS2010POP)%>%
mutate(county = as.numeric(county))
View(popData)
popData <- read_csv("/Users/Kevin/Desktop/DS/PM/HW4/2011alldata.csv")%>%
select(county, CENSUS2010POP)
popData <- read_csv("/Users/Kevin/Desktop/DS/PM/HW4/2011alldata.csv")%>%
select(county, CENSUS2010POP)%>%
mutate(county = as.numeric(county))
View(popData)
popData <- read_csv("/Users/Kevin/Desktop/DS/PM/HW4/2011alldata.csv")
View(popData)
popData <- read_csv("/Users/Kevin/Desktop/DS/PM/HW4/2011alldata.csv")%>%
select(state, county, CENSUS2010POP)%>%
mutate(county = as.numeric(county),
state = as.numeric(state))
#Second export (CDC lyme data)
lymeData%>%
select(-Ctyname,-Stname)%>%
left_join(popData,
by = c("CTYCODE"="county","STCODE" = "state"))%>%view()
colnames(popData)
#Second export (CDC lyme data)
lymeData%>%
select(-Ctyname,-Stname)%>%
left_join(popData,
by = c("CTYCODE"="county","STCODE" = "state"))%>%
mutate(Cases2000 = Cases2000 / CENSUS2010POP,
Cases2001 = Cases2001 / CENSUS2010POP,
Cases2002 = Cases2002 / CENSUS2010POP,
Cases2003 = Cases2003 / CENSUS2010POP,
Cases2004 = Cases2004 / CENSUS2010POP,
Cases2005 = Cases2005 / CENSUS2010POP,
Cases2006 = Cases2006 / CENSUS2010POP,
Cases2007 = Cases2007 / CENSUS2010POP,
Cases2008 = Cases2008 / CENSUS2010POP,
Cases2009 = Cases2009 / CENSUS2010POP,
Cases2010 = Cases2010 / CENSUS2010POP,
Cases2011 = Cases2011 / CENSUS2010POP,
Cases2012 = Cases2012 / CENSUS2010POP,
Cases2013 = Cases2013 / CENSUS2010POP,
Cases2014 = Cases2014 / CENSUS2010POP,
Cases2015 = Cases2015 / CENSUS2010POP,
Cases2016 = Cases2016 / CENSUS2010POP,
Cases2017 = Cases2017 / CENSUS2010POP,
Cases2018 = Cases2018 / CENSUS2010POP,)%>%view()
#Second export (CDC lyme data)
lymeData%>%
select(-Ctyname,-Stname)%>%
left_join(popData,
by = c("CTYCODE"="county","STCODE" = "state"))%>%
mutate(Cases2000 = Cases2000 / CENSUS2010POP*1000,
Cases2001 = Cases2001 / CENSUS2010POP*1000,
Cases2002 = Cases2002 / CENSUS2010POP*1000,
Cases2003 = Cases2003 / CENSUS2010POP*1000,
Cases2004 = Cases2004 / CENSUS2010POP*1000,
Cases2005 = Cases2005 / CENSUS2010POP*1000,
Cases2006 = Cases2006 / CENSUS2010POP*1000,
Cases2007 = Cases2007 / CENSUS2010POP*1000,
Cases2008 = Cases2008 / CENSUS2010POP*1000,
Cases2009 = Cases2009 / CENSUS2010POP*1000,
Cases2010 = Cases2010 / CENSUS2010POP*1000,
Cases2011 = Cases2011 / CENSUS2010POP*1000,
Cases2012 = Cases2012 / CENSUS2010POP*1000,
Cases2013 = Cases2013 / CENSUS2010POP*1000,
Cases2014 = Cases2014 / CENSUS2010POP*1000,
Cases2015 = Cases2015 / CENSUS2010POP*1000,
Cases2016 = Cases2016 / CENSUS2010POP*1000,
Cases2017 = Cases2017 / CENSUS2010POP*1000,
Cases2018 = Cases2018 / CENSUS2010POP*1000,)%>%view()
#Second export (CDC lyme data)
lymeForExport<-lymeData%>%
select(-Ctyname,-Stname)%>%
left_join(popData,
by = c("CTYCODE"="county","STCODE" = "state"))%>%
mutate(Cases2000 = Cases2000 / CENSUS2010POP*1000,
Cases2001 = Cases2001 / CENSUS2010POP*1000,
Cases2002 = Cases2002 / CENSUS2010POP*1000,
Cases2003 = Cases2003 / CENSUS2010POP*1000,
Cases2004 = Cases2004 / CENSUS2010POP*1000,
Cases2005 = Cases2005 / CENSUS2010POP*1000,
Cases2006 = Cases2006 / CENSUS2010POP*1000,
Cases2007 = Cases2007 / CENSUS2010POP*1000,
Cases2008 = Cases2008 / CENSUS2010POP*1000,
Cases2009 = Cases2009 / CENSUS2010POP*1000,
Cases2010 = Cases2010 / CENSUS2010POP*1000,
Cases2011 = Cases2011 / CENSUS2010POP*1000,
Cases2012 = Cases2012 / CENSUS2010POP*1000,
Cases2013 = Cases2013 / CENSUS2010POP*1000,
Cases2014 = Cases2014 / CENSUS2010POP*1000,
Cases2015 = Cases2015 / CENSUS2010POP*1000,
Cases2016 = Cases2016 / CENSUS2010POP*1000,
Cases2017 = Cases2017 / CENSUS2010POP*1000,
Cases2018 = Cases2018 / CENSUS2010POP*1000,))
#Second export (CDC lyme data)
lymeForExport<-lymeData%>%
select(-Ctyname,-Stname)%>%
left_join(popData,
by = c("CTYCODE"="county","STCODE" = "state"))%>%
mutate(Cases2000 = Cases2000 / CENSUS2010POP*1000,
Cases2001 = Cases2001 / CENSUS2010POP*1000,
Cases2002 = Cases2002 / CENSUS2010POP*1000,
Cases2003 = Cases2003 / CENSUS2010POP*1000,
Cases2004 = Cases2004 / CENSUS2010POP*1000,
Cases2005 = Cases2005 / CENSUS2010POP*1000,
Cases2006 = Cases2006 / CENSUS2010POP*1000,
Cases2007 = Cases2007 / CENSUS2010POP*1000,
Cases2008 = Cases2008 / CENSUS2010POP*1000,
Cases2009 = Cases2009 / CENSUS2010POP*1000,
Cases2010 = Cases2010 / CENSUS2010POP*1000,
Cases2011 = Cases2011 / CENSUS2010POP*1000,
Cases2012 = Cases2012 / CENSUS2010POP*1000,
Cases2013 = Cases2013 / CENSUS2010POP*1000,
Cases2014 = Cases2014 / CENSUS2010POP*1000,
Cases2015 = Cases2015 / CENSUS2010POP*1000,
Cases2016 = Cases2016 / CENSUS2010POP*1000,
Cases2017 = Cases2017 / CENSUS2010POP*1000,
Cases2018 = Cases2018 / CENSUS2010POP*1000,)
write_csv(lymeForExport,"/Users/Kevin/Desktop/DS/PM/HW4/LDcdcData.csv")
runApp('Desktop/DS/PM/HW4/Assignment4')
runApp('Desktop/DS/PM/HW4/Assignment4')
?addLegend
runApp('Desktop/DS/PM/HW4/Assignment4')
